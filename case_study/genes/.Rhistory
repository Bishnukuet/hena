.libPaths()
cran.packages <- c("igraph", "randomForest", "h2o", "ModelMetrics", "ggplot2", "tidyr", "dplyr", "data.table", "stringr")
install.packages(cran.packages)
install.packages("dplyr")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
path <- rstudioapi::getActiveDocumentContext()$path
path
load("~/Documents/absb/results/integration/nodes_igri.RData")
mart <- useMart("ENSEMBL_MART_ENSEMBL", "hsapiens_gene_ensembl", host = "ensembl.org")
ensg2name_igri <- getBM(attributes=c("ensembl_gene_id","external_gene_name","gene_biotype"), filters=c("ensembl_gene_id"),values=ensg_nodes_igri, mart=mart)
colnames(ensg2name_igri) <- c("ensg", "gene_name", "biotype")
libary(biomaRt)
library(biomaRt)
mart <- useMart("ENSEMBL_MART_ENSEMBL", "hsapiens_gene_ensembl", host = "ensembl.org")
ensg2name_igri <- getBM(attributes=c("ensembl_gene_id","external_gene_name","gene_biotype"), filters=c("ensembl_gene_id"),values=ensg_nodes_igri, mart=mart)
colnames(ensg2name_igri) <- c("ensg", "gene_name", "biotype")
setwd("~/Documents/absb/results/integration")
save(ensg2name_igri, file="ensg2name_igri.Rdata")
load("~/Documents/absb/results/integration/ensg_nodes.RData")
mart <- useMart("ENSEMBL_MART_ENSEMBL", "hsapiens_gene_ensembl", host = "ensembl.org")
ensg2name <- getBM(attributes=c("ensembl_gene_id","external_gene_name","gene_biotype"), filters=c("ensembl_gene_id"),values=ensg_nodes, mart=mart)
colnames(ensg2name) <- c("ensg", "gene_name", "biotype")
save(ensg2name, file="ensg2name.RData")
load("~/Documents/absb/results/integration/integrated_int.RData")
load("~/Documents/absb/results/integration/integrated_int.RData")
dim(integrated_int)
load("~/Documents/absb/results/integration/integrated_int.RData")
library(ggplot2)
integrated_int$data_source <- factor(integrated_int$data_source, levels = c("PBA","IAH", "ADIA","SIA", #PPI
"ADN", "ABA_CA1", "ABA_CA2","ABA_CA3","ABA_CA4","ABA_DG","ABA_Sptn","ABA_subiculum", #co-expression
"TGEN", "HBTRC","ADNI_VER", # epistasis +IGRI
"ADNI_ADAS11_slope" , "ADNI_ADAS13_slope",
"ADNI_CDRSB_slope" , "ADNI_EcogPtDivatt_slope", "ADNI_EcogPtLang_slope",
"ADNI_EcogPtMem_slope","ADNI_EcogPtPlan_slope","ADNI_EcogPtTotal_slope",
"ADNI_EcogPtVisspat_slope","ADNI_EcogSPDivatt_slope","ADNI_EcogSPLang_slope",
"ADNI_EcogSPMem_slope", "ADNI_EcogSPOrgan_slope", "ADNI_EcogSPPlan_slope",
"ADNI_EcogSPTotal_slope", "ADNI_EcogSPVisspat_slope","ADNI_FAQ_slope",
"ADNI_MMSE_slope" , "ADNI_MOCA_slope","ADNI_RAVLT_forgetting_slope",
"ADNI_RAVLT_immediate_slope" ,"ADNI_RAVLT_learning_slope", "ADNI_RAVLT_perc_forgetting_slope",
"ADNI_latest_ADAS11", "ADNI_latest_ADAS13", "ADNI_latest_CDRSB_1E-8",
"ADNI_latest_EcogPtDivatt","ADNI_latest_EcogPtLang" , "ADNI_latest_EcogPtMem",
"ADNI_latest_EcogPtOrgan" , "ADNI_latest_EcogPtPlan" , "ADNI_latest_EcogPtTotal",
"ADNI_latest_EcogPtVisspat","ADNI_latest_EcogSPDivatt" , "ADNI_latest_EcogSPLang",
"ADNI_latest_EcogSPMem", "ADNI_latest_EcogSPOrgan" ,"ADNI_latest_EcogSPPlan",
"ADNI_latest_EcogSPTotal", "ADNI_latest_EcogSPVisspat" ,  "ADNI_latest_FAQ_1E-8",
"ADNI_latest_MMSE", "ADNI_latest_MOCA" , "ADNI_latest_RAVLT_forgetting" ,
"ADNI_latest_RAVLT_immediate", "ADNI_latest_RAVLT_learning", "ADNI_latest_RAVLT_perc_forgetting"))
integrated_int_plot <- integrated_int[,4:5]
setwd("~/Documents/absb")
pdf("results/integration/integrated_int_stats_stacked_hist.pdf")
ggplot(data = integrated_int_plot, aes(x = data_source,fill = interaction_type)) +
geom_histogram(alpha=0.7, stat="count") +
stat_count( geom="text", colour="white", size=2, angle=90,
aes(label=..count.., group=interaction_type, y=0.5*(..count..)))+
theme_bw()+
labs(x = "Data source")+
labs(y= "Number of Interactions")+
theme(axis.text.y= element_blank(),
axis.text.x = element_text(angle=90, hjust=1,vjust=-0.001,size = 6),
#axis.text.y = element_text(angle=90),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks.y = element_blank())+
guides(fill=guide_legend(title="Interaction type"))+ scale_y_continuous(trans='log2')
dev.off()
data_summary<-integrated_int[1, -c(4:5)]
colnames(data_summary)<-c("ds_ID", "nodes", "interactions")
data_summary<-unname(data_summary)
dsor<-unique(tst$data_source)
for(i in 1:length(dsor)){
data_s<-dsor[i]
pba<-integrated_int[integrated_int$data_source%in%data_s,]
int<-dim(pba)[1]
node<-length(unique(c(pba$ensg.A,pba$ensg.B)))
data_summary<-rbind(data_summary, c(data_s, node, int))
}
data_summary<-integrated_int[1, -c(4:5)]
colnames(data_summary)<-c("ds_ID", "nodes", "interactions")
data_summary<-unname(data_summary)
dsor<-unique(integrated_int$data_source)
for(i in 1:length(dsor)){
data_s<-dsor[i]
pba<-integrated_int[integrated_int$data_source%in%data_s,]
int<-dim(pba)[1]
node<-length(unique(c(pba$ensg.A,pba$ensg.B)))
data_summary<-rbind(data_summary, c(data_s, node, int))
}
write.table(data_summary, file="results/integration/integrated_int_stats.txt", sep="\t", rownames=F)
write.table(data_summary, file="results/integration/integrated_int_stats.txt", sep="\t", row.names=F)
data_summary<- data_summary[-1,]
write.table(data_summary, file="results/integration/integrated_int_stats.txt", sep="\t", row.names=F)
head(data_summary)
colnames(data_summary)<-c("ds_ID", "nodes", "interactions")
write.table(data_summary, file="results/integration/integrated_int_stats.txt", sep="\t", row.names=F)
write.table(data_summary, file="results/integration/integrated_int_stats.txt", sep="\t", quote=F, row.names=F)
dsor
i=1
dsor[i]
node=1
int=7
c(data_s, node, int)
data_s<-dsor[i]
c(data_s, node, int)
data_s<-as.character(dsor[i])
c(data_s, node, int)
data_summary<-integrated_int[1, -c(4:5)]
colnames(data_summary)<-c("ds_ID", "nodes", "interactions")
data_summary<-unname(data_summary)
dsor<-unique(integrated_int$data_source)
for(i in 1:length(dsor)){
data_s<-as.character(dsor[i])
ds<-integrated_int[integrated_int$data_source%in%data_s,]
int<-dim(ds)[1]
node<-length(unique(c(ds$ensg.A,ds$ensg.B)))
data_summary<-rbind(data_summary, c(data_s, node, int))
}
data_summary<- data_summary[-1,]
colnames(data_summary)<-c("ds_ID", "nodes", "interactions")
write.table(data_summary, file="results/integration/integrated_int_stats.txt", sep="\t", quote=F, row.names=F)
setwd("~/Documents/absb/comparison_public_db")
library("UpsetR")
library(UpsetR)
library(UpsetR)
install.packages("UpsetR")
library("UpSetR")
print("Reading in individual counts")
coexp_int <- read.table(file="results/comparisons/integrated_int_coexp_noduplicated_count.txt")
coexp_int <- coexp_int[1,1]
coexp_gm <- read.table(file="results/comparisons/gm_coexp_count.txt")
coexp_gm <- coexp_gm[1,1]
coexp_string <- read.table(file="results/comparisons/string_coexp_count.txt")
coexp_string <- coexp_string[1,1]
ppi_int <- read.table(file="results/comparisons/integrated_int_ppi_noduplicated_count.txt")
ppi_int <- ppi_int[1,1]
ppi_gm <- read.table(file="results/comparisons/gm_ppi_count.txt")
ppi_gm <- ppi_gm[1,1]
ppi_string <- read.table(file="results/comparisons/string_ppi_count.txt")
ppi_string <- ppi_string[1,1]
genint_gm <- read.table(file="results/comparisons/gm_genint_count.txt")
genint_gm <- genint_gm[1,1]
genint_int <- read.table(file="results/comparisons/integrated_int_epi_noduplicated_count.txt")
genint_int <- genint_int[1,1]
print("Reading in the numbers of overlapping pairs")
# Overlapping co-expression
coexp_int_gm <- read.table(file="results/comparisons/gm_intds_coexp_overlap_sort_count.txt")
coexp_int_gm <- coexp_int_gm[1,1]
coexp_int_string <- read.table(file="results/comparisons/string_intds_coexp_overlap_sort_count.txt")
coexp_int_string <- coexp_int_string[1,1]
# Overlapping PPIs
ppi_int_gm <- read.table(file="results/comparisons/gm_intds_ppi_overlap_sort_count.txt")
ppi_int_gm <- ppi_int_gm[1,1]
ppi_int_string <- read.table(file="results/comparisons/string_intds_ppi_overlap_sort_count.txt")
ppi_int_string <- ppi_int_string[1,1]
# Overlapping genetic interactions
genint_int_gm <- read.table(file="results/comparisons/gm_intds_genint_overlap_sort_count.txt")
genint_int_gm <- genint_int_gm[1,1]
# Coexpression
expressionInput <- c(
"HENA" = coexp_int,
"GeneMania" = coexp_gm,
"STRING" = coexp_string,
"GeneMania&HENA" = coexp_int_gm,
"STRING&HENA"  = coexp_int_string,
"HENA&STRING&GeneMania" = 0)
# Order the sets
pdf("results/comparisons/coexpression.pdf")
upset(fromExpression(expressionInput), sets= c("GeneMania","STRING","HENA"),
keep.order = T,
main.bar.color = "gray23",
sets.bar.color = "#56B4E9",
#sets.x.label = "Total number of interactions in the sets",
text.scale=1.5,
set_size.angles=0
)
dev.off()
######## PPI no scale
expressionInput <- c(
"HENA" = ppi_int,
"GeneMania" = ppi_gm,
"STRING" = ppi_string,
"GeneMania&HENA" = ppi_int_gm,
"STRING&HENA"  = ppi_int_string,
"HENA&STRING&GeneMania" = 0)
# Order the sets
pdf("results/comparisons/ppi.pdf")
upset(fromExpression(expressionInput),sets= c("GeneMania","STRING","HENA"),
keep.order = T,
main.bar.color = "gray23",
sets.bar.color = "#56B4E9",
#sets.x.label = "Total number of interactions in the sets",
# mainbar.y.label = "Number of intersections",
#     mb.ratio = c(0.7, 0.3),
text.scale=1.5,
set_size.angles=0
)
dev.off()
################# Genetic interactions
expressionInput <- c(
"HENA" = genint_int,
"GeneMania" = genint_gm,
"GeneMania&HENA" = genint_int_gm)
# Order the sets
pdf("results/comparisons/genetic_interactions.pdf")
upset(fromExpression(expressionInput), sets= c("GeneMania","HENA"),
keep.order = T,
main.bar.color = "gray23",
sets.bar.color = "#56B4E9",
#sets.x.label = "Total number of interactions in the sets",
#mainbar.y.label = "Number of intersections",
text.scale=1.5,
set_size.angles=0
)
dev.off()
setwd("~/Documents/data-science/genes")
library(data.table)
library(dplyr)
library(tidyr)
library(stringr)
library(igraph)
library(h2o)
library(randomForest)
library(ggplot2)
library(ModelMetrics)
path = "../datasets/genes_data/"
#
#---------------------------------#
# Functions
#---------------------------------#
# autoencoder function
autoencoder_fn <- function(data){
dt_pos <- filter(data, label=='disease')
dt_unknown <- filter(data, label == 'unknown')
dt_neg <- filter(data, label == 'non-disease')
h2o.init(nthreads = -1)
dt_ho_p <- as.h2o(dt_pos)
dt_ho_n <- as.h2o(dt_neg)
dt_ho_u <- as.h2o(dt_unknown)
features <- setdiff(colnames(dt_ho_n), c('ensg', 'label'))
splits_neg <- h2o.splitFrame(dt_ho_n,
ratio = c(0.5),
seed = 5622)
train_neg  <- splits_neg[[1]]
test_neg <- splits_neg[[2]]
model_neg <- h2o.deeplearning(x = features,
training_frame = train_neg,
model_id = "model_neg",
autoencoder = TRUE,
reproducible = TRUE, #slow - turn off for real problems
ignore_const_cols = FALSE,
seed = 562,
hidden = c(100, 10, 100),
epochs = 800,
activation = "Tanh")
print(paste("train mse on negative cases is ", h2o.mse(model_neg), sep=''))
anomaly_neg <- h2o.anomaly(model_neg, test_neg) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
mutate(ensg = as.vector(test_neg[, 'ensg']),
node_type = as.vector(test_neg[, 'label']))
anomaly_uknown <- h2o.anomaly(model_neg, dt_ho_u) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
mutate(ensg = as.vector(dt_ho_u[, 'ensg']),
node_type = as.vector(dt_ho_u[, 'label']))
anomaly_pos <- h2o.anomaly(model_neg, dt_ho_p) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
mutate(ensg = as.vector(dt_ho_p[, 'ensg']),
node_type = as.vector(dt_ho_p[, 'label']))
anomaly <- bind_rows(anomaly_neg, anomaly_uknown, anomaly_pos)
return(anomaly)
}
dt_interactions <- fread(paste(path, "interactions.csv", sep=''), header=T)
dt_nodes <- fread(paste(path, "node_attributes.csv", sep=''), header=T)
nodes_hops <- fread(paste(path, "nodes_hops.csv", sep=''), header=T)
nodes_hops[is.na(nodes_hops)] <- 0
flist <- list.files(path = path, pattern="graphsage_embs")
embs_list <- list()
for(file in flist){
dt <- fread(paste(path, file, sep=''), header=T)
dt <- dt[,-1]
name_comp <- str_split(file, pattern='_')[[1]]
edge_type <- name_comp[1]
colnames(dt) <-  c(paste(edge_type, colnames(dt)[-c(257)], sep="_"), colnames(dt)[c(257)])
data_name <- paste(edge_type, "embs", sep="_")
assign(data_name, dt)
embs_list[[data_name]] <- dt
}
dt_embs <- embs_list %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="ensg"), .)
dt_embs[is.na(dt_embs)] <- 0
nodes_hops$label <- NULL
dt_all <- left_join(dt_nodes, nodes_hops, by= "ensg") %>%
left_join(dt_embs, by="ensg")
# reducing graph and nodes to those that have non-empty biological features
dt_reduced <- dt_all
dt_reduced$is_empty <- rowSums(dt_reduced[,c(3:234)])
dt_reduced <- filter(dt_reduced, is_empty!=0)
dt_reduced$is_empty <- NULL
colnames(dt_reduced)[4:11] <- paste("brain",colnames(dt_reduced)[4:11], sep='_')
colnames(dt_reduced) <- str_replace_all(colnames(dt_reduced),'- | ','_')
colnames(dt_reduced) <- str_replace_all(colnames(dt_reduced),'-','_')
dt_biological <- dt_reduced[,c(1:234)]
dt_graph <- dt_reduced %>% select(ensg, label, contains("epi"), contains('ppi'), contains('coexp'))
anomaly_biological <- autoencoder_fn(data=dt_biological) %>% mutate(feature_set="biological")
anomaly_graph <- autoencoder_fn(data=dt_graph) %>% mutate(feature_set="graph-related")
anomaly_all <- autoencoder_fn(data=dt_reduced) %>% mutate(feature_set="all")
anomaly <- bind_rows(anomaly_biological, anomaly_graph, anomaly_all)
mean_mse <- anomaly %>%
group_by(feature_set, node_type) %>%
summarise(mean = mean(Reconstruction.MSE),
std=sd(Reconstruction.MSE),
count=n()
)
print("Autoencoder mse for all feature sets:")
print(mean_mse)
p_autoencoder <- ggplot(anomaly, aes(x=Reconstruction.MSE, fill=node_type)) +
geom_density(position="dodge", alpha=0.3) +
theme_bw(base_size=18) + facet_wrap(~feature_set, scales='free')
p_autoencoder
png(paste(path, "reconstruction_mse.png", sep=''), width = 500, height=700)
print(p_autoencoder)
dev.off()
print(mean_mse)
p_autoencoder <- ggplot(anomaly, aes(x=Reconstruction.MSE, fill=node_type)) +
geom_density(position="dodge", alpha=0.3) +
theme_bw(base_size=18) + facet_wrap(~feature_set, scales='free')
p_autoencoder
nodes_hops$label <- NULL
dt_all <- left_join(dt_nodes, nodes_hops, by= "ensg") %>%
left_join(dt_embs, by="ensg")
dt_interactions <- fread(paste(path, "interactions.csv", sep=''), header=T)
dt_nodes <- fread(paste(path, "node_attributes.csv", sep=''), header=T)
nodes_hops <- fread(paste(path, "nodes_hops.csv", sep=''), header=T)
nodes_hops[is.na(nodes_hops)] <- 0
#---------------------------------#
# embeddings to features
#_________________________________#
flist <- list.files(path = path, pattern="graphsage_embs")
embs_list <- list()
for(file in flist){
dt <- fread(paste(path, file, sep=''), header=T)
dt <- dt[,-1]
name_comp <- str_split(file, pattern='_')[[1]]
edge_type <- name_comp[1]
colnames(dt) <-  c(paste(edge_type, colnames(dt)[-c(257)], sep="_"), colnames(dt)[c(257)])
data_name <- paste(edge_type, "embs", sep="_")
assign(data_name, dt)
embs_list[[data_name]] <- dt
}
dt_embs <- embs_list %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="ensg"), .)
dt_embs[is.na(dt_embs)] <- 0
nodes_hops$label <- NULL
dt_all <- left_join(dt_nodes, nodes_hops, by= "ensg") %>%
left_join(dt_embs, by="ensg")
# reducing graph and nodes to those that have non-empty biological features
dt_reduced <- dt_all
colnames(dt_reduced)[4:11] <- paste("brain",colnames(dt_reduced)[4:11], sep='_')
colnames(dt_reduced) <- str_replace_all(colnames(dt_reduced),'- | ','_')
colnames(dt_reduced) <- str_replace_all(colnames(dt_reduced),'-','_')
dt_biological <- dt_reduced[,c(1:234)]
dt_graph <- dt_reduced %>% select(ensg, label, contains("epi"), contains('ppi'), contains('coexp'))
anomaly_biological <- autoencoder_fn(data=dt_biological) %>% mutate(feature_set="biological")
anomaly_graph <- autoencoder_fn(data=dt_graph) %>% mutate(feature_set="graph-related")
anomaly_all <- autoencoder_fn(data=dt_reduced) %>% mutate(feature_set="all")
anomaly <- bind_rows(anomaly_biological, anomaly_graph, anomaly_all)
mean_mse <- anomaly %>%
group_by(feature_set, node_type) %>%
summarise(mean = mean(Reconstruction.MSE),
std=sd(Reconstruction.MSE),
count=n()
)
print("Autoencoder mse for all feature sets:")
print(mean_mse)
dt_interactions <- fread(paste(path, "interactions.csv", sep=''), header=T)
dt_nodes <- fread(paste(path, "node_attributes.csv", sep=''), header=T)
nodes_hops <- fread(paste(path, "nodes_hops.csv", sep=''), header=T)
nodes_hops[is.na(nodes_hops)] <- 0
flist <- list.files(path = path, pattern="graphsage_embs")
embs_list <- list()
for(file in flist){
dt <- fread(paste(path, file, sep=''), header=T)
dt <- dt[,-1]
name_comp <- str_split(file, pattern='_')[[1]]
edge_type <- name_comp[1]
colnames(dt) <-  c(paste(edge_type, colnames(dt)[-c(257)], sep="_"), colnames(dt)[c(257)])
data_name <- paste(edge_type, "embs", sep="_")
assign(data_name, dt)
embs_list[[data_name]] <- dt
}
dt_embs <- embs_list %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="ensg"), .)
dt_embs[is.na(dt_embs)] <- 0
nodes_hops$label <- NULL
dt_all <- left_join(dt_nodes, nodes_hops, by= "ensg") %>%
left_join(dt_embs, by="ensg")
# reducing graph and nodes to those that have non-empty biological features
dt_reduced <- dt_all
dt_reduced$is_empty <- rowSums(dt_reduced[,c(3:234)])
dt_reduced <- filter(dt_reduced, is_empty!=0)
dt_reduced$is_empty <- NULL
#
colnames(dt_reduced)[4:11] <- paste("brain",colnames(dt_reduced)[4:11], sep='_')
colnames(dt_reduced) <- str_replace_all(colnames(dt_reduced),'- | ','_')
colnames(dt_reduced) <- str_replace_all(colnames(dt_reduced),'-','_')
dt_biological <- dt_reduced[,c(1:234)]
dt_graph <- dt_reduced %>% select(ensg, label, contains("epi"), contains('ppi'), contains('coexp'))
anomaly_biological <- autoencoder_fn(data=dt_biological) %>% mutate(feature_set="biological")
anomaly_graph <- autoencoder_fn(data=dt_graph) %>% mutate(feature_set="graph-related")
anomaly_all <- autoencoder_fn(data=dt_reduced) %>% mutate(feature_set="all")
anomaly <- bind_rows(anomaly_biological, anomaly_graph, anomaly_all)
mean_mse <- anomaly %>%
group_by(feature_set, node_type) %>%
summarise(mean = mean(Reconstruction.MSE),
std=sd(Reconstruction.MSE),
count=n()
)
print("Autoencoder mse for all feature sets:")
print(mean_mse)
p_autoencoder <- ggplot(anomaly, aes(x=Reconstruction.MSE, fill=node_type)) +
geom_density(position="dodge", alpha=0.3) +
theme_bw(base_size=18) + facet_wrap(~feature_set, scales='free')
p_autoencoder
dt_interactions <- fread(paste(path, "interactions.csv", sep=''), header=T)
dt_nodes <- fread(paste(path, "node_attributes.csv", sep=''), header=T)
nodes_hops <- fread(paste(path, "nodes_hops.csv", sep=''), header=T)
nodes_hops[is.na(nodes_hops)] <- 0
flist <- list.files(path = path, pattern="graphsage_embs")
embs_list <- list()
for(file in flist){
dt <- fread(paste(path, file, sep=''), header=T)
dt <- dt[,-1]
name_comp <- str_split(file, pattern='_')[[1]]
edge_type <- name_comp[1]
colnames(dt) <-  c(paste(edge_type, colnames(dt)[-c(257)], sep="_"), colnames(dt)[c(257)])
data_name <- paste(edge_type, "embs", sep="_")
assign(data_name, dt)
embs_list[[data_name]] <- dt
}
dt_embs <- embs_list %>%
Reduce(function(dtf1,dtf2) full_join(dtf1,dtf2,by="ensg"), .)
dt_embs[is.na(dt_embs)] <- 0
#--
nodes_hops$label <- NULL
dt_all <- left_join(dt_nodes, nodes_hops, by= "ensg") %>%
left_join(dt_embs, by="ensg")
# reducing graph and nodes to those that have non-empty biological features
colnames(dt_reduced)[4:11] <- paste("brain",colnames(dt_reduced)[4:11], sep='_')
colnames(dt_reduced) <- str_replace_all(colnames(dt_reduced),'- | ','_')
colnames(dt_reduced) <- str_replace_all(colnames(dt_reduced),'-','_')
dt_biological <- dt_reduced[,c(1:234)]
dt_graph <- dt_reduced %>% select(ensg, label, contains("epi"), contains('ppi'), contains('coexp'))
# all - dt_reduced
anomaly_biological <- autoencoder_fn(data=dt_biological) %>% mutate(feature_set="biological")
anomaly_graph <- autoencoder_fn(data=dt_graph) %>% mutate(feature_set="graph-related")
anomaly_all <- autoencoder_fn(data=dt_reduced) %>% mutate(feature_set="all")
anomaly <- bind_rows(anomaly_biological, anomaly_graph, anomaly_all)
mean_mse <- anomaly %>%
group_by(feature_set, node_type) %>%
summarise(mean = mean(Reconstruction.MSE),
std=sd(Reconstruction.MSE),
count=n()
)
print("Autoencoder mse for all feature sets:")
print(mean_mse)
p_autoencoder <- ggplot(anomaly, aes(x=Reconstruction.MSE, fill=node_type)) +
geom_density(position="dodge", alpha=0.3) +
theme_bw(base_size=18) + facet_wrap(~feature_set, scales='free')
p_autoencoder
